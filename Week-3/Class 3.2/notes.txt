Question- What is fetch API?
Answer- It is promise based asynchronous function which work on web API and fetch some data.




Question- What is axios?
Answer- Axios is a third-party library for making HTTP requests in both the browser and Node.js environments. It was 
designed to be more feature-rich and user-friendly compared to fetch.




Question- What is hashing?
Answer- Hashing often refers to the process of securely storing and verifying passwords or credentials. Instead of 
storing plain-text passwords in a database, which can pose a security risk if the database is compromised, systems 
store password hashes. When a user creates or updates a password, it's hashed using a secure hash function. When a 
user attempts to log in, the provided password is hashed using the same hash function, and the resulting hash is 
compared to the stored hash in the database. If they match, the authentication is successful. Hashing is a one-way 
process. The original data cannot be derived from the hash. It's designed to be irreversible.




Question- What is encryption?
Answer- Encryption transforms data into an unreadable format (ciphertext) using an algorithm and a key. The main 
goal is to protect confidentiality by allowing authorized parties to decrypt and access the original data. 
Encryption is a reversible process using a specific key or keys. The ciphertext can be decrypted back to the 
original plaintext using the decryption key.




Question- What is json web tokens?
Answer- JWT stands for JSON Web Token. It's a compact and secure way to transmit information between parties as a 
JSON object. JWTs are commonly used for authentication and information exchange in web applications. They consist 
of three parts: a header specifying the token's type and the cryptographic algorithm used, a payload containing the 
information being transmitted, and a signature to ensure the token hasn't been tampered with. 

Eg- eyJhbGciOiAiSFMyNTYiLCAidHlwIjoiSldUIn0.eyJ1c2VybmFtZSI6ICJqhuX2RvZSJ9.kP1T-2cM-m71l89K8AGjyXJbSOmc3r3mJzUKm-Vs
1. Header: eyJhbGciOiAiSFMyNTYiLCAidHlwIjoiSldUIn0 (base64Url-encoded JSON { "alg": "HS256", "typ": "JWT" })

The full form of HS256 is Hash-based Message Authentication Code. It uses the SHA-256 hashing algorithm for generating and verifying JWT tokens securely.

2. Payload: eyJ1c2VybmFtZSI6ICJqb2huX2RvZSJ9 (base64Url-encoded JSON { "username": "john_doe" })
3. Signature: kP1T-2cM-m71l89K8Ad6iGjyXJbSOmc3r3mJzUKm-Vs (base64Url-encoded signature created using the header, 
payload, and secret key)

Hashing:
What it is: A one-way process to convert data (like passwords) into a fixed, scrambled string.
Purpose: To store data securely. Even if someone sees the hash, they can't easily reverse it to get the original data.
Example:
Password: mypassword
Hash: 5f4dcc3b5aa765d61d8327deb882cf99
        
 Encryption:
What it is: A two-way process to convert data into a secret format (scrambled) so that only authorized people can read it by decrypting.
Purpose: To protect data in transit (e.g., messages or sensitive info).
Example:
Plain text: hello
Encrypted: Hdk92@js7
Decrypted back: hello                                or

**JWT (JSON Web Token)** ke baare mein sabhi related information Hinglish mein:

---

### **What is JWT?**
JWT ek compact, URL-safe token hota hai jo authentication aur information exchange ke liye use hota hai. Yeh token usually web applications mein user ko authenticate karne ke liye use hota hai. JWT 3 parts mein divide hota hai:  
1. **Header**  
2. **Payload**  
3. **Signature**

---

### **JWT Structure:**
JWT ek string hoti hai jo 3 parts se banayi jaati hai, separated by periods (`.`):

1. **Header**:  
   - Header usually JWT ka type (`JWT`) aur signing algorithm (`HS256`, `RS256`, etc.) ko specify karta hai.
   - Example: `{"alg": "HS256", "typ": "JWT"}`

2. **Payload**:  
   - Payload mein claims hote hain. Claims wo information hoti hai jo aap token mein store karte hain. Yeh kuch predefined hoti hain jaise `sub`, `exp`, `iat`, ya custom claims bhi ho sakte hain.
   - Example: `{"sub": "1234567890", "name": "John Doe", "iat": 1516239022}`

3. **Signature**:  
   - Signature ko validate karne ke liye header aur payload ko encode kar ke ek secret key ya private key ke saath sign kiya jaata hai. Isse ensure hota hai ki token modify nahi kiya gaya hai.
   - Signature ka format:  
   `HMACSHA256( base64UrlEncode(header) + "." + base64UrlEncode(payload), secret)`

---

### **JWT ka Use Case:**
JWT ko mainly **authentication** aur **authorization** ke liye use kiya jata hai:
- **Authentication**: Jab user login karta hai, server JWT token generate karta hai aur client ko send karta hai. Client har subsequent request mein is token ko send karta hai (usually HTTP headers mein), aur server token ko verify karke request ko process karta hai.
- **Authorization**: JWT mein `exp` claim hota hai jo token ke expiry ko define karta hai. Token ek fixed time period ke baad expire ho jata hai, uske baad user ko dobara se login karna padta hai.


---

### **JWT Example:**

**Header**:
```json
{
  "alg": "HS256",
  "typ": "JWT"
}
```

**Payload**:
```json
{
  "sub": "1234567890",
  "name": "John Doe",
  "iat": 1516239022
}
```

**Signature**:
- HMACSHA256(base64UrlEncode(header) + "." + base64UrlEncode(payload), secret)

Final JWT will look like:
```
eyJhbGciOiAiSFMyNTYiLCJ0eXAiOiAiSlMiIH0.eyJzdWIiOiAiMTIzNDU2Nzg5MCIsIm5hbWUiOiAiSm9obiBEb2UiLCJpYXQiOiAxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
```

---

### **JWT Security:**
- **Signing**: JWT ko sign kiya jata hai taaki data tampered na ho. Secret key ya private key se sign karte hain.
- **Encryption**: Agar token mein sensitive data hai, toh JWT ko encrypt kiya ja sakta hai.

---

### **JWT vs Sessions:**
- **Sessions**: Server-side pe store hote hain, aur client ko session ID store karna padta hai.
- **JWT**: Client-side pe store hota hai aur server ko session manage karne ki zarurat nahi hoti.

---

**JWT ka Use** authentication aur secure data transfer ke liye hai, aur aapko sirf secret key ko safely store karna hota hai taaki JWT tampered na ho. 

Let me know if you need more details!


**Cryptographic Algorithm** ka matlab hai ek mathematical process jo data ko encrypt (secure) aur decrypt (accessible) karne ke liye use hota hai.

### Types:
1. **Symmetric Key (Secret Key)**:
   - Same key use hoti hai encryption aur decryption ke liye. 
   - Example: **AES**, **DES**.
   
2. **Asymmetric Key (Public/Private Key)**:
   - Do keys: Public (share ki ja sakti hai) aur Private (sirf receiver ke paas).
   - Example: **RSA**, **ECC**.

3. **Hash Functions**:
   - Data ko fixed length string mein convert karta hai, jisse original data recover nahi kiya ja sakta.
   - Example: **SHA-256**, **MD5**.

### Uses:
- **Data Encryption**: Sensitive data ko secure rakhna.
- **Digital Signatures**: Document ki authenticity check karna.
- **Data Integrity**: Ensure karna ki data modify na ho.
  
**Importance**: Cryptographic algorithms ensure karte hain ki data secure, private aur authentic rahe.



Question- What is local storage in context to authentication?
Answer- A place in your browser where you can store some data. Usually things that are stored include- 
1. Authentication tokens 
2. User language preference 
3. User theme preference




Question- What is authentication?
Answer- Backend authentication refers to the process of confirming and validating the identity of a user or system 
trying to access a service or application.




Question- What is authorization?
Answer- Authorization refers to the process of determining what actions or activities an authenticated user is 
allowed to perform within a system or an application. It involves granting or denying access rights and permissions 
to resources based on the identity of the user.




Question- What is the use if try-catch block?
Answer- A try-catch block is used for error handling. It allows developers to manage and handle exceptions (errors) 
that might occur during the execution of their code.




Question- What is database?
Answwer- A database is an organized collection of structured information or data. It is designed to efficiently 
manage, store, retrieve, and manipulate data. 




Question- What are collections?
Answer-  A group of documents (records) within a database. It is equivalent to a table in relational databases and 
is used to organize and manage related data.




Question- What are acid properties?
Ansswer- Atomicity ensures that either everything in a task happens or nothing does. It is like buying a computer: 
you get all the parts, or you get none. Consistency means the database goes from one sensible state to another. 
Imagine rearranging a shelf, it's organized before and after, never messy in between. Isolation keeps different tasks 
from messing with each other. It's like having your own lane in traffic, others can't bump into your space. 
Durability ensures that once something's done, it stays that way. It's like saving a file, if the power goes out, 
your work isn't lost.




Question- What is cap theorem?
Answer- CAP stands for Consistency, Availability, and Partition tolerance. 
1. Consistency: All nodes in a distributed system have the same data at the same time, ensuring that concurrent 
transactions produce consistent results.
2. Availability: Every request to the system gets a response, even if some nodes in the system fail or are slow to 
respond. 
3. Partition tolerance: The system continues to operate despite network partitions (communication failures) that 
might occur between nodes, ensuring that the system can handle and recover from network failures.

The CAP theorem states that distributed system can only provide two of three properties simultaneously: consistency, 
availability, and partition tolerance.




Question- What is the difference between sql and nosql database?
Answer- SQL-
1. Relational database management system (RDBMS).
2. Relational tables with predefined schema.
3. These databases are best suited for complex queries.
4. Follows ACID property.
5. Follows strict schema to store data and slow.
6. Examples: MySQL, PostgreSQL, Oracle, MS-SQL Server, etc.

NOSQL-
1. Non-relational or distributed database system.
2. They have a dynamic schema.
3. These databases are not so good for complex queries.
4. Follows CAP(consistency, availability, partition tolerance).
5. Store data in a schema-less fashion. Extremely lean and fast way to store data. 
6. Examples: MongoDB, HBase, Neo4j, Cassandra, etc.




Question- What is graph database?
Answer- Data is stored in the form of a graph. Specially useful in cases where relationships need to be stored 
(social networks). Example - Neo4j.




Question- What is vector database?
Answer- Stores data in the form of vectors. Useful in Machine learning. Example - Pinecone.




Question- What is primary key?
Answer- A primary key or non-null key in a database is a unique identifier for each record or row in a table. 




Question- What is foreign key?
Answer- A foreign key or referencing key in a database is a field or a set of fields within a table that establishes 
a link between two tables.




Question- What is MongoDB?
Answer- It is a document database. It stores data in json format called bson. It is schemaless if we add data 
directly to database using mongodb compass etc.




Question- What is mongoose?
Answer- Mongoose is an object data modelling or mapper. It is a node.js library that act as a layer between server 
and database and make connections. It requires schema to make connections between server and database.




Question- What is dry principle?
Answer- DRY is a software development principle that stands for “Don't Repeat Yourself.” This principle means that 
your aim is to reduce repetitive patterns and duplicate code and logic.




Question- Why cannot we hit databases directly?
Answer- Hitting the database directly can cause security issues and make it harder to manage and grow your system. 
Using a middleman like an API or ORM helps keep things safe, organized, and easier to handle as your system gets 
bigger.




Question- Why not noSQL is better?
Answer- Can lead to inconsistent database. Can cause runtime errors. It is too flexible for an app that needs 
strictness. You might think that mongoose does add strictness to the codebase because we used to define a schema 
there. That strictness is present at the Node.js level, not at the DB level. You can still put in erroneous data in 
the database that doesn’t follow that schema.




Question- Why SQL is better than noSQL?
Answer- SQL databases have a strict schema. They require you to-
1. Define your schema.
2. Put in data that follows that schema.
3. Update the schema as your app changes and perform migrations.

There are 4 parts when using an SQL database (not connecting it to Node.js, just running it and putting data in it)-
1. Running the database.
2. Using a library that let’s you connect and put data in it.
3. Creating a table and defining it’s schema.
4. Run queries on the database to interact with the data (Insert/Update/Delete).